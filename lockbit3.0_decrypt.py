from idaapi import *
from idautils import *
from idc import *

def hexstr2Unicode(Hex_Str):
 
    Unicde_Str = ""
    for i in range(0,len(Hex_Str)//4):
        chr(int(Hex_Str[i*4:i*4+4], 16))
        Unicde_Str += chr(int(Hex_Str[i*4:i*4+4], 16))
 
    return Unicde_Str


def decrypt(data):
    
    result = ""
    for temp in data:
        print(temp)
        temp = int(temp,16)
        temp = temp ^ 0x4506DFCA;
        print(hex(temp))
        temp = ~temp
        hexstr = hex((temp&0xFFFFFFFF))
        print(hexstr)
        str = hexstr2Unicode(hexstr)
        result += str[::-1]     
        
    return result

def find_function_arg(addr):


    while True:
        addr = idc.prev_head(addr)
        if print_insn_mnem(addr) == "push":
            addr = idc.prev_head(addr)
            if print_insn_mnem(addr) == "push":
                print(get_operand_value(addr, 0))
                time = get_operand_value(addr, 0)
                i = 0
                encodestr = [0]*time
                while i < time:
                    addr = idc.prev_head(addr)
                    if print_insn_mnem(addr) == "mov":
                        temp = hex(get_operand_value(addr, 1))
                        encodestr[time-i-1] = temp
                        i = i + 1
                return encodestr  
            return 0
        return 0

i=0   
for addr in XrefsTo(0x401E60, flags=0):

    if i == 36:
        i = i + 1
        continue
    if i < 147:
        print(i)
        print(hex(addr.frm))
        encodestr = find_function_arg(addr.frm)
        print(encodestr)
        if encodestr==-1 or encodestr==0:
            continue
        dec = decrypt(encodestr)
        print(dec)
        print("Ref Addr: 0x%x | Decrypted: %s" % (addr.frm, dec))
        set_cmt(addr.frm, dec, 0)
        i = i + 1
 
